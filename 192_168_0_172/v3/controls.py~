#!/usr/bin/python3

'''
Set up controls for servos that control the car
'''

import RPi.GPIO as GPIO
import time

import Adafruit_PCA9685

# set up a pulse width modulation function to send to servos
pwm = Adafruit_PCA9685.PCA9685()
pwm.set_pwm_freq(60)

class Motor:

    def __init__(self, en, pin1, pin2):
        '''Set up pins and start motor'''

        GPIO.setwarnings(False)  #??? is this global
        GPIO.setmode(GPIO.BCM)   #??? is this global
        GPIO.setup(en, GPIO.OUT)
        GPIO.setup(pin1, GPIO.OUT)
        GPIO.setup(pin2, GPIO.OUT)

        self.en = en
        self.pin1 = pin1
        self.pin2 = pin2

        self.pwm = 0
        # this could pop an error and need try: except: pass
        self.pwm = GPIO.PWM(en,1000)

    def __del__(self):
        pass

    def __enter__(self):
        return self

    def __exit__(,exception_type, exception_value, traceback):
        self.close()

    def close(self):
        self.stop()
        GPIO.cleanup() #???

    def stop(self):
        '''Stops motor'''
        GPIO.output(self.pin1, GPIO.LOW)
        GPIO.output(self.pin2, GPIO.LOW)
        GPIO.output(self.en,   GPIO.LOW)

    def forward(self, speed):
        '''Drives forward'''
        GPIO.output(self.pin1, GPIO.HIGH)
        GPIO.output(self.pin2, GPIO.LOW)
        self.pwm.start(100)
        self.pwm.ChangeDutyCycle(speed)

    def reverse(self, speed):
        '''Drives backwards'''
        GPIO.output(self.pin1, GPIO.LOW)
        GPIO.output(self.pin2, GPIO.HIGH)
        self.pwm.start(100)
        self.pwm.ChangeDutyCycle(speed)

    def drive(self, speed):
        '''checks direction and moves'''
        if speed>0:
            self.forward(speed)
        elif speed<0:
            self.reverse(-speed)
        else:
            self.stop()

    def pulse(self,speed,t):
        self.drive(speed)
        time.sleep(t)
        self.stop()


class Servo:

    '''Class defining a servo'''

    def __init__(self, pin, pwmMin, pwmMax, pwmCenter, angMin, angMax, angCenter):
        '''Create an instance of Servo class'''

        # Hardware pin
        self.pin = pin

        # Underlying PWM settings
        self._pwm_center = pwmCenter
        self._pwm_max = pwmMax
        self._pwm_min = pwmMin
        self._pwm_range = pwmMax-pwmMin

        # External angle options
        self.MIN = angMin
        self.MAX = angMax
        self.CENTER = angCenter
        self.RANGE =angMax-angMin

        # set to initial position
        self.angle = self.CENTER
        self.center()

    def __del__(self):
        pass

    def __enter__(self):
        return self

    def __exit__(,exception_type, exception_value, traceback):
        self.close()

    def close(self):
        pass

    def _angle_to_pwm(self, angle):
        '''Convert angle to corresponding pwm frequency'''
        return (angle-self.CENTER)*(self._pwm_range/self.RANGE)+self._pwm_center

    def goto(self, angle):
        '''Rotate to angle'''
        if angle>self.MAX:
            print("Warning: request above available positions: using {} instead"
                  .format(self.MAX))
            
            angle=self.MAX
            
        elif angl<self.MIN:
            print("Warning: request below available positions: using {} instead"
                  .format(self.MIN))
            
            angle=self.MIN
            
        pwm.set_pwm(self.pin, 0, self._angle_to_pwm(angle))
        self.angle = angle

    def rotate(self, angle):
        '''Rotate an incriment'''
        self.goto(angle+self.angle)

    def center(self):
        '''Go to center'''
        self.goto(self.CENTER)

    def max(self):
        '''Go to max'''
        self.goto(self.MAX)

    def min(self):
        '''Go to min'''
        self.goto(self.MIN)

    

        
