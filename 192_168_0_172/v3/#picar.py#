!/usr/bin/python3
import controls
import sensors
from threading import Thread

import numpy as np
import time

import RPi.GPIO as GPIO
#GPIO.setwarnings(False) #??? In original code
GPIO.setmode(GPIO.BCM)  # Set pin numbering system for board


class PiCar:
    '''PiCar class'''

    def __init__(self):
        '''Create instance of PiCar'''
        
        # Controls
        print("Setting up controls")
        self.motor = controls.Motor(17,27,18)
        self._stopped=False
        self.tilt = controls.Servo(0,425,650,515,-30,30,0)
        self.pan = controls.Servo(1,100,600,385,-90,90,0)
        self.turn = controls.Servo(2,180,520,370,-45,45,0)

        # Sensors
        print("Setting up sensors")
        self.camera = sensors.Camera( resolution=(640,480) )
        self.sonar = sensors.Sonar()
        self.lineSensor = sensors.LineSensor(pin_middle=16,
                                             pin_left=19,
                                             pin_right=20,
                                             blackLine=True)
        # Variables
        self._mode = None
        print("PiCar initialized")

    
    def __del__(self):
        self.close()

    def __enter__(self):
        return self

    def __exit__(self,exception_type, exception_value, traceback):
        self.close()

    def close(self):
        self.camera.close()
        GPIO.cleanup() #??? originally in sonar?

    def all_stop(self):
        self._stopped = True
        self.motor.stop()
        self.all_ahead()

    def all_ahead(self):
        self.turn.center()
        self.tilt.center()
        self.pan.center()


    def run_cmd(self, cmd,arg=None):
        '''Run a preset command'''
        # Must match client side commands
        if cmd == 'disconnect':
            self.close()
        elif cmd == 'forward':
            #self.motor.pulse(100,.1)
            self.motor.forward(100)
        elif cmd == 'reverse':
            #self.motor.pulse(-100,.1)
            self.motor.reverse(100)
        elif cmd == 'stop':
            self.motor.stop()
        elif cmd == 'coast':
            self.motor.coast()
        elif cmd == 'all_stop':
            self.all_stop(),
        elif cmd == 'all_ahead':
            self.all_ahead()
        elif cmd == 'left':
            self.turn.rotate(30)
        elif cmd == 'right':
            self.turn.rotate(-30)
        elif cmd== 'straight':
            self.turn.center()
        elif cmd == 'tilt_down':
            self.tilt.rotate(-1)
        elif cmd == 'tilt_up':
            self.tilt.rotate(1)
        elif cmd == 'pan_left':
            self.pan.rotate(1)
        elif cmd == 'pan_right':
            self.pan.rotate(-1)
        else:
            pass

    def sonar_scan(self, distance=1, scanSpeed=1, tiltAngle = 0): #TODO: impliment distance
        '''Measure distances across full range of sonar'''

        self.tilt.goto(tiltAngle)
        angles = [ang for ang in range(self.pan.MIN,
                                       self.pan.MAX+scanSpeed,
                                       scanSpeed)]
        for angle in angles:
            self.pan.goto(angle)
            results.append(self.sonar.ping(distance))

        return results, angles


    def pulse(self,runTime, coastTime):
        self._stopped = False
        while not self._stopped:
            self.motor.forward(100)
            time.sleep(runTime)
            self.motor.coast()
            time.sleep(coastTime)
        self._stopped = True

    def follow_line(self, darkLine = False, speed=1,
                    gain = (1,1,1), nHist = 100,
                    runTime = .2, coastTime = .2,
                    maxAng = 15):
        '''Look for a line and drive along following it'''

        self._mode='follow_line'
        # Set up a history of observations
        obs = np.zeros((nHist,3))

        #motorThread = Thread(target=self.pulse, args=(runTime,coastTime))
        #motorThread.start()

        P = 0
        while self._mode=='follow_line':
            
            # Take measure with line sensor
            current = self.lineSensor() # Place new observation on the end
            if (current==[1,1,1]).all():
                current = obs[-1] 
            obs[:-1] = obs[1:] # Drop first in observation
            obs[-1] = current
            #print(obs[-1])
            # Determine wheel angle based on control algorithm
            [left, center, right] = obs.sum(0)

            #Pprev = P
            P = current[2]-current[0]
            I = abs(right-left)/nHist
            D = (nHist-center)/nHist     # Hi if recently on line
            #D = (left-right)/nHist
            # D will be 1 or 0
            # 1 means close to line (small turn)
            
            turnAng = P*(gain[0] + gain[1]*I) / (gain[2]*D+1)
            if turnAng>maxAng:
                turnAng = maxAng
            elif turnAng < -maxAng:
                turnAng = -maxAng
                
            print("{}  {} {}".format([left,center,right],[P, I, D], turnAng))
            
            # Pulse motor and turn wheels according to control algorithm
            self.turn.goto(turnAng)
            #time.sleep(1)
            if abs(turnAng)<12:
                self.motor.forward(50)
            elif abs(turnAng)<30:
                self.motor.forward(75)
            else:
                self.motor.forward(100)

            yield

        self._stopped = True


    def track_object(self):
        '''Keep an object in view and follow it'''
        pass

    def explore(self):
        pass



if __name__=='__main__':
    car = PiCar()

    try:
        car.follow_line(darkLine=False,
                        speed=1,
                        gain=(10,35,5),
                        nHist = 100,
                        runTime = .5,
                        coastTime = .5,
                        maxAng = 40
        )
    finally:
        car.all_stop()

        
